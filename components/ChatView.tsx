import React, { useState, useEffect, useRef } from 'react';
import { ChatMessage, ItemStatus, AiSuggestedPart, Project } from '../types';
import { getAiChatStream } from '../services/geminiService';
import { SendIcon } from './icons/SendIcon';
import { BotIcon } from './icons/BotIcon';
import { UserIcon } from './icons/UserIcon';
import { SpinnerIcon } from './icons/SpinnerIcon';
import { useInventory } from '../contexts/InventoryContext';
import { useToast } from '../contexts/ToastContext';
import { ChatIcon } from './icons/ChatIcon';
import { ProjectsIcon } from './icons/ProjectsIcon';

interface ChatViewProps {
    initialMessage?: string | null;
}

const parseJsonBlock = <T,>(content: string, startMarker: string, endMarker: string): { displayContent: string; jsonData: T | null } => {
    const regex = new RegExp("```json\\s*" + startMarker + "([\\s\\S]*?)" + endMarker + "\\s*```");
    const match = content.match(regex);

    if (!match || !match[1]) {
        return { displayContent: content, jsonData: null };
    }
    
    const jsonString = match[1].trim();
    const displayContent = content.replace(match[0], '').trim();

    try {
        const jsonData = JSON.parse(jsonString) as T;
        return { displayContent, jsonData };
    } catch (e) {
        console.error(`Failed to parse JSON for marker ${startMarker}:`, e);
        return { displayContent: content, jsonData: null }; // Return original content on error
    }
};


const ChatView: React.FC<ChatViewProps> = ({ initialMessage }) => {
  const { inventory, addItem, addProject } = useInventory();
  const { addToast } = useToast();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (initialMessage) {
      setInput(initialMessage);
    }
  }, [initialMessage]);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages, isLoading]);

  const handleSend = async () => {
    if (input.trim() === '' || isLoading) return;

    const userMessage: ChatMessage = { role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const stream = await getAiChatStream(input, messages.slice(0, -1), inventory);

      const modelMessage: ChatMessage = { role: 'model', content: '', groundingChunks: [] };
      setMessages(prev => [...prev, modelMessage]);

      let fullResponse = '';
      let groundingChunks: any[] = [];
      
      for await (const chunk of stream) {
        fullResponse += chunk.text;
        groundingChunks = chunk.candidates?.[0]?.groundingMetadata?.groundingChunks || groundingChunks;
        
        const { jsonData: projectData } = parseJsonBlock<{ projectName: string; components: { name: string; quantity: number }[] }>(
            fullResponse, '/// PROJECT_JSON_START ///', '/// PROJECT_JSON_END ///'
        );

        setMessages(prev => prev.map((msg, index) => 
            index === prev.length - 1 
            ? { ...msg, content: fullResponse, groundingChunks, suggestedProject: projectData || msg.suggestedProject } 
            : msg
        ));
      }

    } catch (error) {
      console.error("Error sending message to AI:", error);
      const errorMessage: ChatMessage = { role: 'model', content: "Sorry, I encountered an error. Please try again." };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddToInventory = (part: AiSuggestedPart, status: ItemStatus.NEED | ItemStatus.WANT) => {
    const newItem = {
        id: '', // Will be generated by context
        name: part.name,
        quantity: 1,
        location: 'To be purchased',
        status: status,
        description: `Suggested by AI. Supplier: ${part.supplier}, Price: ${part.price}. Link: ${part.link}`,
        createdAt: new Date().toISOString(),
        imageUrl: undefined
    };
    addItem(newItem);
    addToast(`${part.name} added to "${status === ItemStatus.NEED ? 'Required' : 'Wishlist'}"!`, 'success');
  };
  
  // Fix: Corrected the type for `projectData` to match what the AI returns, which lacks an 'id'.
  const handleCreateProject = (projectData: { name: string; quantity: number }[], projectName: string) => {
    const projectComponents = projectData.map(aiComp => {
        const inventoryItem = inventory.find(invItem => invItem.name.toLowerCase() === aiComp.name.toLowerCase());
        return {
            id: inventoryItem ? inventoryItem.id : `ai-${Date.now()}-${aiComp.name.replace(/\s/g, "")}`,
            name: aiComp.name,
            quantity: aiComp.quantity,
            source: 'ai-suggested' as const,
        };
    });

    const newProject: Omit<Project, 'id' | 'createdAt'> = {
        name: projectName,
        description: `AI-suggested project created on ${new Date().toLocaleDateString()}`,
        components: projectComponents,
        status: 'In Progress',
        notes: `Project structure generated by IoT Oracle AI. Components identified:\n${projectData.map(c => `- ${c.quantity} x ${c.name}`).join('\n')}`
    };

    addProject(newProject);
    addToast(`Project "${projectName}" created!`, 'success');
  };

  const parseContent = (content: string) => {
    const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
    const parts = [];
    let lastIndex = 0;
    let match;

    while ((match = codeBlockRegex.exec(content)) !== null) {
      if (match.index > lastIndex) {
        parts.push({ type: 'text', content: content.substring(lastIndex, match.index) });
      }
      parts.push({ type: 'code', language: match[1] || 'text', content: match[2].trim() });
      lastIndex = match.index + match[0].length;
    }

    if (lastIndex < content.length) {
      parts.push({ type: 'text', content: content.substring(lastIndex) });
    }
    
    return parts.map((part, i) => {
      if (part.type === 'code') {
        return (
          <pre key={i} className="bg-primary p-4 rounded-lg my-2 overflow-x-auto text-sm">
            <code className={`language-${part.language}`}>{part.content}</code>
          </pre>
        );
      }
      // Markdown table support
      if (part.content.includes('|--')) {
        const lines = part.content.trim().split('\n');
        const headerLine = lines.find(l => l.includes('|--'));
        if (!headerLine) return <p key={i} className="whitespace-pre-wrap">{part.content}</p>;

        const headerIndex = lines.indexOf(headerLine);
        const header = lines[headerIndex-1].split('|').map(h => h.trim()).filter(Boolean);
        const rows = lines.slice(headerIndex + 1).map(row => row.split('|').map(c => c.trim()).filter(Boolean));
        return (
          <div key={i} className="my-2 overflow-x-auto">
            <table className="min-w-full divide-y divide-border-color border border-border-color rounded-lg">
              <thead className="bg-primary">
                <tr>{header.map((h, hi) => <th key={hi} className="px-4 py-2 text-left text-sm font-semibold">{h}</th>)}</tr>
              </thead>
              <tbody className="divide-y divide-border-color bg-secondary">
                {rows.map((row, ri) => <tr key={ri}>{row.map((cell, ci) => <td key={ci} className="px-4 py-2 text-sm">{cell}</td>)}</tr>)}
              </tbody>
            </table>
          </div>
        );
      }
      // Simple markdown for bold, italics, lists
      const formattedText = part.content
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/^- (.*$)/gm, '<ul class="list-disc list-inside ml-4"><li>$1</li></ul>')
        .replace(/<\/ul>\n<ul/g, ''); // Fix for multiple list items

      return <div key={i} className="whitespace-pre-wrap" dangerouslySetInnerHTML={{ __html: formattedText }} />;
    });
  };

  return (
    <div className="flex flex-col h-full max-w-4xl mx-auto w-full">
      <h1 className="text-2xl sm:text-3xl font-bold text-text-primary mb-4 shrink-0">Chat Assistant</h1>
      
      <div ref={chatContainerRef} className="flex-1 overflow-y-auto pr-2 space-y-4 sm:space-y-6 pb-4">
        {messages.map((msg, index) => {
          const { displayContent: contentAfterSuggestions, jsonData: suggestions } = parseJsonBlock<AiSuggestedPart[]>(msg.content, '/// SUGGESTIONS_JSON_START ///', '/// SUGGESTIONS_JSON_END ///');
          const { displayContent, jsonData: project } = parseJsonBlock<{ projectName: string; components: { name: string; quantity: number }[] }>(contentAfterSuggestions, '/// PROJECT_JSON_START ///', '/// PROJECT_JSON_END ///');
          
          return (
            <div key={index} className={`flex items-start gap-3 sm:gap-4 ${msg.role === 'user' ? 'justify-end' : ''}`}>
              {msg.role === 'model' && <div className="flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-accent flex items-center justify-center"><BotIcon className="h-5 w-5 sm:h-6 sm:w-6" /></div>}
              <div className={`max-w-[85%] sm:max-w-xl p-3 sm:p-4 rounded-xl ${msg.role === 'user' ? 'bg-accent text-white' : 'bg-secondary'}`}>
                <div className="prose prose-invert text-text-primary prose-p:my-0 prose-pre:my-2 prose-strong:text-text-primary prose-em:text-text-primary">
                  {parseContent(displayContent)}
                </div>

                {(suggestions || project) && (
                    <div className="mt-4 pt-3 border-t border-border-color space-y-3">
                        <h4 className="text-sm font-semibold text-text-secondary">Interactive Actions:</h4>
                        {project && (
                             <div className="bg-primary/50 p-3 rounded-lg">
                                <p className="font-semibold text-text-primary text-sm flex items-center gap-2"><ProjectsIcon /> {project.projectName}</p>
                                <div className="flex items-center space-x-2 mt-2">
                                    <button onClick={() => handleCreateProject(project.components, project.projectName)} className="text-xs bg-highlight/20 text-highlight hover:bg-highlight/40 px-2 py-1 rounded-md transition-colors w-full text-center">
                                        Create Project
                                    </button>
                                </div>
                            </div>
                        )}
                        {suggestions?.map((part, partIdx) => (
                            <div key={partIdx} className="bg-primary/50 p-3 rounded-lg">
                                <p className="font-semibold text-text-primary text-sm">{part.name}</p>
                                <div className="flex items-center space-x-2 mt-2">
                                    <button onClick={() => handleAddToInventory(part, ItemStatus.NEED)} className="text-xs bg-yellow-500/20 text-yellow-400 hover:bg-yellow-500/40 px-2 py-1 rounded-md transition-colors">
                                        To Required
                                    </button>
                                     <button onClick={() => handleAddToInventory(part, ItemStatus.WANT)} className="text-xs bg-sky-500/20 text-sky-400 hover:bg-sky-500/40 px-2 py-1 rounded-md transition-colors">
                                        To Wishlist
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
                {msg.groundingChunks && msg.groundingChunks.length > 0 && (
                  <div className="mt-4 pt-2 border-t border-border-color">
                    <h4 className="text-xs font-semibold text-text-secondary mb-1">Sources:</h4>
                    <ul className="text-xs space-y-1">
                      {msg.groundingChunks.map((chunk, i) => (
                        chunk.web && (
                          <li key={i}>
                            <a href={chunk.web.uri} target="_blank" rel="noopener noreferrer" className="text-sky-400 hover:underline break-all">
                              {chunk.web.title || chunk.web.uri}
                            </a>
                          </li>
                        )
                      ))}
                    </ul>
                  </div>
                )}
              </div>
              {msg.role === 'user' && <div className="flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-secondary flex items-center justify-center"><UserIcon className="h-5 w-5 sm:h-6 sm:w-6" /></div>}
            </div>
          )
        })}
        {isLoading && messages[messages.length-1]?.role !== 'model' && (
          <div className="flex items-start gap-3 sm:gap-4">
            <div className="flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-accent flex items-center justify-center"><BotIcon className="h-5 w-5 sm:h-6 sm:w-6" /></div>
            <div className="max-w-xl p-3 sm:p-4 rounded-xl bg-secondary flex items-center">
              <SpinnerIcon /> <span className="ml-2">Thinking...</span>
            </div>
          </div>
        )}
         {messages.length === 0 && !isLoading && (
            <div className="text-center text-text-secondary p-8 flex flex-col justify-center items-center h-full">
              <ChatIcon className="mx-auto w-12 h-12 sm:w-16 sm:h-16" />
              <p className="mt-4 text-base sm:text-lg">Start a conversation with your IoT Oracle.</p>
              <p className="text-xs sm:text-sm">Ask about your next project, what parts you need, or for coding help!</p>
            </div>
        )}
      </div>

      <div className="mt-auto pt-4 shrink-0 bg-primary">
        <div className="flex items-center bg-secondary border border-border-color rounded-lg p-2">
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSend(); } }}
            placeholder="Plan your next project..."
            rows={1}
            className="flex-1 bg-transparent px-2 resize-none focus:outline-none max-h-40"
          />
          <button onClick={handleSend} disabled={isLoading} className="bg-accent p-2 rounded-md text-white disabled:bg-gray-600 transition-colors">
            <SendIcon />
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatView;
